# Stage 1: Compile and Build angular codebase
FROM node:20-bullseye AS build

WORKDIR /usr/local/app

# Install Chrome for running tests using modern GPG method
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    libnss3 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libxcomposite1 \
    libxrandr2 \
    libgbm-dev \
    libasound2 \
    libfontconfig1 \
    libgtk-3-0 \
    --no-install-recommends \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

ENV CHROME_BIN=/usr/bin/google-chrome-stable

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies with clean install for reproducible builds
RUN npm ci --prefer-offline --no-audit

# Copy application source
COPY . .

# Build for UAT configuration
RUN npx ng build --configuration=uat

# Stage 2: Serve app with nginx server
FROM nginx:1.27-alpine AS runtime

# Install wget for health check
RUN apk add --no-cache wget

# Copy custom nginx configuration
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /usr/local/app/dist/parts-website/browser /usr/share/nginx/html

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

EXPOSE 80